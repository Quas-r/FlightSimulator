//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""4e35b957-8330-4ff2-8ee7-139fee169b3a"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""0e0d9762-db62-4f50-89b0-dbe548e52d36"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RollPitch"",
                    ""type"": ""Value"",
                    ""id"": ""ffe7c4f5-7405-466e-89b0-0d7badbd52ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""e4288e48-041e-4884-83ae-eabad2f731f8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""3509b134-e053-4e77-977e-32e8e5884536"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleFlaps"",
                    ""type"": ""Button"",
                    ""id"": ""c82f8e53-cf8f-4231-a3f7-3cbc579e0c53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Controller Shoulders"",
                    ""id"": ""f43efa62-3575-47ad-84cb-b655507f425a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9451539b-ac0c-4c49-9820-3e95f747e504"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""59837231-fbb3-45a2-8d83-38f152d7c479"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/button6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Shift/Ctrl"",
                    ""id"": ""43e66639-db7c-4c19-8335-6753062ef6ae"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""59d04896-37ae-439b-99f7-d51f0f906c5b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""facbd907-d4f0-4ac8-b0ae-2cc078427d08"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6cfaed36-5fe6-4895-8206-114ce1798b59"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1567730a-45ce-432a-b104-88dc763ee345"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6fe3d628-9ff3-4136-9844-315f0ead53da"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""85e1822f-ce29-49dd-ab59-7cb726d080dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b6ef048a-8c42-41c4-baae-5f1954f26ccc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f8ad3a4b-95a7-4020-b649-e68130bd8ee2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller Triggers"",
                    ""id"": ""47d8b432-1405-4da1-8c0b-76edb7743cc4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6e1197a7-f9c3-46ae-979a-39bea3705898"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f50422bc-b563-4fe2-afae-7b21e307bd73"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller Right Stick"",
                    ""id"": ""5e170fa1-6c32-40c0-98f6-53ae25ca0e5c"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75143bb7-e741-449c-9706-6aff436aa748"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/rz"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=2)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce4c48ba-41c8-4817-a291-614e98b73391"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/rz"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Normalize(max=2)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ac326d0e-f369-45bf-884a-4de45271bed5"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Normalize(max=2)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7c8ec4a5-8a69-4333-961e-51405cc11802"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/z"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=2)"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52ee061e-58bc-45b3-9ec2-770647f78895"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFlaps"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_Thrust = m_Plane.FindAction("Thrust", throwIfNotFound: true);
        m_Plane_RollPitch = m_Plane.FindAction("RollPitch", throwIfNotFound: true);
        m_Plane_Yaw = m_Plane.FindAction("Yaw", throwIfNotFound: true);
        m_Plane_Camera = m_Plane.FindAction("Camera", throwIfNotFound: true);
        m_Plane_ToggleFlaps = m_Plane.FindAction("ToggleFlaps", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private List<IPlaneActions> m_PlaneActionsCallbackInterfaces = new List<IPlaneActions>();
    private readonly InputAction m_Plane_Thrust;
    private readonly InputAction m_Plane_RollPitch;
    private readonly InputAction m_Plane_Yaw;
    private readonly InputAction m_Plane_Camera;
    private readonly InputAction m_Plane_ToggleFlaps;
    public struct PlaneActions
    {
        private @Controls m_Wrapper;
        public PlaneActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thrust => m_Wrapper.m_Plane_Thrust;
        public InputAction @RollPitch => m_Wrapper.m_Plane_RollPitch;
        public InputAction @Yaw => m_Wrapper.m_Plane_Yaw;
        public InputAction @Camera => m_Wrapper.m_Plane_Camera;
        public InputAction @ToggleFlaps => m_Wrapper.m_Plane_ToggleFlaps;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void AddCallbacks(IPlaneActions instance)
        {
            if (instance == null || m_Wrapper.m_PlaneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Add(instance);
            @Thrust.started += instance.OnThrust;
            @Thrust.performed += instance.OnThrust;
            @Thrust.canceled += instance.OnThrust;
            @RollPitch.started += instance.OnRollPitch;
            @RollPitch.performed += instance.OnRollPitch;
            @RollPitch.canceled += instance.OnRollPitch;
            @Yaw.started += instance.OnYaw;
            @Yaw.performed += instance.OnYaw;
            @Yaw.canceled += instance.OnYaw;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @ToggleFlaps.started += instance.OnToggleFlaps;
            @ToggleFlaps.performed += instance.OnToggleFlaps;
            @ToggleFlaps.canceled += instance.OnToggleFlaps;
        }

        private void UnregisterCallbacks(IPlaneActions instance)
        {
            @Thrust.started -= instance.OnThrust;
            @Thrust.performed -= instance.OnThrust;
            @Thrust.canceled -= instance.OnThrust;
            @RollPitch.started -= instance.OnRollPitch;
            @RollPitch.performed -= instance.OnRollPitch;
            @RollPitch.canceled -= instance.OnRollPitch;
            @Yaw.started -= instance.OnYaw;
            @Yaw.performed -= instance.OnYaw;
            @Yaw.canceled -= instance.OnYaw;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @ToggleFlaps.started -= instance.OnToggleFlaps;
            @ToggleFlaps.performed -= instance.OnToggleFlaps;
            @ToggleFlaps.canceled -= instance.OnToggleFlaps;
        }

        public void RemoveCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlaneActions instance)
        {
            foreach (var item in m_Wrapper.m_PlaneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlaneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    public interface IPlaneActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnRollPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnToggleFlaps(InputAction.CallbackContext context);
    }
}
